Chào bạn,

Để giải quyết triệt để vấn đề tồn kho bị âm và đảm bảo hệ thống định lượng hoạt động chính xác, chúng ta cần rà soát và đồng bộ lại logic ở cả cơ sở dữ liệu và các file code liên quan. Dưới đây là danh sách chi tiết các thành phần cốt lõi bạn cần tập trung vào:

### ## 1. Các Bảng trong Cơ sở dữ liệu (Database Tables)

Đây là nền tảng lưu trữ toàn bộ dữ liệu về định lượng và tồn kho.

* **`NguyenLieu` (Nguyên liệu):** Bảng quan trọng nhất.
    * `soLuongTon`: Cần đảm bảo kiểu dữ liệu có đủ độ chính xác (ví dụ: `DECIMAL(18, 3)`). Đây là giá trị bị trừ đi khi bán hàng.
    * `donViTinh`: Là **đơn vị cơ bản** (kg, lít, cái) mà `soLuongTon` được lưu trữ. Mọi tính toán phải được quy đổi về đơn vị này.
    * `nguongCanhBao`: Giá trị để hệ thống tự động cảnh báo khi `soLuongTon` xuống thấp hơn mức này.
* **`CongThuc` (Công thức):** Nơi kết nối sản phẩm và nguyên liệu.
    * `luongCanThiet`: Số lượng nguyên liệu cần dùng cho một sản phẩm.
    * `donViTinhSuDung`: Đơn vị được sử dụng trong công thức (g, ml, cái). Hệ thống phải **quy đổi** từ đơn vị này về `donViTinh` cơ bản của `NguyenLieu` khi trừ kho.
* **`ChiTietHoaDon` (Chi tiết Hóa đơn):** Ghi lại số lượng sản phẩm được bán.
    * `idSanPham` & `soLuong`: Là hai thông tin đầu vào để hệ thống biết cần trừ nguyên liệu nào và với số lượng bao nhiêu.
* **`HoaDon` (Hóa đơn):**
    * `trangThai`: Trạng thái "Đã thanh toán" là tín hiệu cuối cùng để thực hiện việc trừ kho.
* **`SanPham` (Sản phẩm):** Là đối tượng trung gian, liên kết `ChiTietHoaDon` với `CongThuc`.
* **`ChiTietPhieuNhap` (Chi tiết Phiếu nhập):**
    * `soLuong`: Số lượng nguyên liệu nhập vào. Cần được quy đổi về **đơn vị cơ bản** trước khi cộng vào `soLuongTon` của bảng `NguyenLieu`.

***

### ## 2. Các File trong Ứng dụng (Application Files)

Đây là nơi chứa toàn bộ logic xử lý và giao diện người dùng.

#### **Lớp Logic Nghiệp vụ (Thư mục `BUS`)**

* **`SanPhamBUS.cs`:**
    * Chứa hàm `KiemTraKhaNangPhucVu()`: Đây là hàm **quan trọng nhất**, có nhiệm vụ tính toán xem một sản phẩm có thể làm được bao nhiêu phần dựa trên `soLuongTon` và `CongThuc`. Hàm này phải xử lý việc quy đổi đơn vị.
* **`GoiMonBUS.cs`:**
    * Sửa lại hàm `GetSanPhamTheoLoai()`: Phải gọi `KiemTraKhaNangPhucVu()` cho mỗi sản phẩm để giao diện biết món nào sắp hết hoặc đã hết hàng.
    * Chứa hàm `ThanhToanHoaDon()`: Đây là nơi thực hiện lệnh `UPDATE` để trừ `soLuongTon` trong bảng `NguyenLieu` sau khi quy đổi đơn vị chính xác.
* **`KhoBUS.cs`:**
    * Chứa hàm `TaoPhieuNhap()`: Logic trong hàm này phải đảm bảo `soLuong` nhập vào được quy đổi về **đơn vị cơ bản** trước khi cộng vào kho.

#### **Giao diện & Xử lý (Thư mục `Views`)**

* **`KhoView.xaml` / `.cs` (Admin):**
    * Tab "Quản lý Nguyên liệu": Nơi Admin thiết lập `donViTinh` cơ bản và `nguongCanhBao`.
    * Tab "Nhập Kho": Giao diện phải cho phép chọn đơn vị nhập (g, kg, ml, lít) và code-behind phải gọi logic quy đổi đơn vị.
    * Tab "Tồn Kho": Hiển thị `soLuongTon` và danh sách cảnh báo.
* **`SanPhamView.xaml` / `.cs` (Admin):**
    * Khu vực "Công thức định lượng": Giao diện phải cho phép chọn `donViTinhSuDung` (g, ml,...) và code-behind phải lưu lại chính xác.
* **`GoiMonView.xaml` / `.cs` (Nhân viên):**
    * Giao diện menu: Phải có khả năng hiển thị trạng thái "sắp hết" hoặc "hết hàng" (ví dụ: làm mờ nút) dựa trên dữ liệu từ `GetSanPhamTheoLoai()`.
    * Code-behind: Phải có bước kiểm tra tồn kho cuối cùng trước khi cho phép thêm món vào hóa đơn để tránh trường hợp nhiều nhân viên cùng gọi một món sắp hết.

#### **Đối tượng Dữ liệu (Thư mục `DTO`)**

* **`NguyenLieu.cs`**, **`CongThuc.cs`**, **`SanPham.cs`**: Các file này cần có đủ các thuộc tính (`nguongCanhBao`, `donViTinhSuDung`, `SoLuongCoThePhucVu`,...) để truyền dữ liệu một cách thông suốt giữa các lớp BUS và giao diện.